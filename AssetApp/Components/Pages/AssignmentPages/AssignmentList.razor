@page "/assets-assignments"
@rendermode InteractiveServer
@inject AssetApp.Services.AssignmentService AssignmentService
@inject AssetApp.Services.Session Session
@inject NavigationManager NavigationManager
@using AssetApp.Models
@using AssetApp.Components.Common

<h3>üíº üë• Asset Assignments</h3>

@if (isLoading)
{
    <p>‚è≥ Loading assignments...</p>
}
else if (!isAuthenticated)
{
    <p>Redirecting to login...</p>
}
else
{
    <button class="btn btn-primary mb-3" @onclick="OpenAddModal">‚ûï Assign Asset</button>

    @if (!assignments.Any())
    {
        <p>No assignments found.</p>
    }
    else
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Asset ID</th>
                    <th>Employee ID</th>
                    <th>Assigned Date</th>
                    <th>Returned Date</th>
                    <th>Notes</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var a in assignments)
                {
                    <tr>
                        <td>@a.AssignmentID</td>
                        <td>@a.AssetID</td>
                        <td>@a.EmployeeID</td>
                        <td>@a.AssignedDate.ToShortDateString()</td>
                        <td>@(a.ReturnedDate?.ToShortDateString() ?? "-")</td>
                        <td>@a.Notes</td>
                        <td>
                            <button class="btn btn-sm btn-primary me-2" @onclick="() => OpenEditModal(a)">Edit</button>
                            <button class="btn btn-sm btn-danger" @onclick="() => OpenDeleteModal(a)">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }

    <AssignmentFormModal Assignment="@selectedAssignment"
                         Title="@modalTitle"
                         Visible="@formModalVisible"
                         OnClose="CloseFormModal"
                         OnSaved="SaveAssignment" />

    <DeleteConfirmationModal Visible="@deleteModalVisible"
                             Title="Delete Assignment"
                             ItemName="@($"AssetID {selectedAssignment?.AssetID}")"
                             OnClose="CloseDeleteModal"
                             OnConfirmed="ConfirmDelete" />

    <Toast Message="@toastMessage" OnClose="() => toastMessage = null" />
}

@code {
    private bool isLoading = true;
    private bool isAuthenticated = false;
    private List<Assignment> assignments = new();
    private bool formModalVisible = false;
    private string modalTitle = "Assign Asset";
    private Assignment selectedAssignment = new();
    private bool deleteModalVisible = false;
    private string? toastMessage;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        // Step 1: Check authentication after prerender
        var username = await Session.GetUserAsync();
        if (string.IsNullOrEmpty(username))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        isAuthenticated = true;
        isLoading = true;
        StateHasChanged();

        // Step 2: Load assignments
        await AssignmentService.CreateTableIfNotExistsAsync();
        assignments = (await AssignmentService.GetAllAsync()).ToList();

        isLoading = false;
        StateHasChanged();
    }

    private void OpenAddModal()
    {
        selectedAssignment = new Assignment { AssignedDate = DateTime.Now };
        modalTitle = "Assign Asset";
        formModalVisible = true;
    }

    private void OpenEditModal(Assignment assignment)
    {
        selectedAssignment = assignment;
        modalTitle = "Edit Assignment";
        formModalVisible = true;
    }

    private void CloseFormModal() => formModalVisible = false;

    private async Task SaveAssignment(Assignment assignment)
    {
        try
        {
            if (assignment.AssignmentID == 0)
                await AssignmentService.AddAsync(assignment);
            else
                await AssignmentService.UpdateAsync(assignment);

            assignments = (await AssignmentService.GetAllAsync()).ToList();
            toastMessage = "‚úÖ Saved successfully!";
        }
        catch (Exception ex)
        {
            toastMessage = $"‚ö†Ô∏è {ex.Message}";
        }

        formModalVisible = false;
        StateHasChanged();
        await Task.Delay(3000);
        toastMessage = null;
        StateHasChanged();
    }

    private void OpenDeleteModal(Assignment assignment)
    {
        selectedAssignment = assignment;
        deleteModalVisible = true;
    }

    private void CloseDeleteModal() => deleteModalVisible = false;

    private async Task ConfirmDelete()
    {
        try
        {
            await AssignmentService.DeleteAsync(selectedAssignment.AssignmentID);
            assignments = (await AssignmentService.GetAllAsync()).ToList();
            toastMessage = "‚úÖ Deleted successfully!";
        }
        catch (Exception ex)
        {
            toastMessage = $"‚ö†Ô∏è {ex.Message}";
        }

        deleteModalVisible = false;
        StateHasChanged();
        await Task.Delay(3000);
        toastMessage = null;
        StateHasChanged();
    }
}
