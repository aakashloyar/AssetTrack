@page "/assignments"
@rendermode InteractiveServer
@inject AssetApp.Services.AssignmentService AssignmentService
@using AssetApp.Models
@using AssetApp.Components.Common

<h3>üíª Asset Assignments</h3>

<button class="btn btn-primary mb-3" @onclick="OpenAddModal">‚ûï Assign Asset</button>

@if (isLoading)
{
    <p>‚è≥ Loading assignments...</p>
}
else if (!assignments.Any())
{
    <p>No assignments found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>ID</th>
                <th>Asset ID</th>
                <th>Employee ID</th>
                <th>Assigned Date</th>
                <th>Returned Date</th>
                <th>Notes</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var a in assignments)
            {
                <tr>
                    <td>@a.AssignmentID</td>
                    <td>@a.AssetID</td>
                    <td>@a.EmployeeID</td>
                    <td>@a.AssignedDate.ToShortDateString()</td>
                    <td>@(a.ReturnedDate?.ToShortDateString() ?? "-")</td>
                    <td>@a.Notes</td>
                    <td>
                        <button class="btn btn-sm btn-primary me-2" @onclick="() => OpenEditModal(a)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => OpenDeleteModal(a)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<AssignmentFormModal Assignment="@selectedAssignment"
                     Title="@modalTitle"
                     Visible="@formModalVisible"
                     OnClose="CloseFormModal"
                     OnSaved="SaveAssignment" />

<DeleteConfirmationModal Visible="@deleteModalVisible"
                         Title="Delete Assignment"
                         ItemName="@($"AssetID {selectedAssignment?.AssetID}")"
                         OnClose="CloseDeleteModal"
                         OnConfirmed="ConfirmDelete" />

<Toast Message="@toastMessage" OnClose="() => toastMessage = null" />

@code {
    private List<Assignment> assignments = new();
    private bool isLoading = true;

    private bool formModalVisible = false;
    private string modalTitle = "Assign Asset";
    private Assignment selectedAssignment = new();

    private bool deleteModalVisible = false;
    private string? toastMessage;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await AssignmentService.CreateTableIfNotExistsAsync();
        assignments = (await AssignmentService.GetAllAsync()).ToList();
        isLoading = false;
    }

    // ================= Add / Edit =================
    private void OpenAddModal()
    {
        selectedAssignment = new Assignment { AssignedDate = DateTime.Now };
        modalTitle = "Assign Asset";
        formModalVisible = true;
    }

    private void OpenEditModal(Assignment assignment)
    {
        if (assignment == null) return;

        selectedAssignment = new Assignment
        {
            AssignmentID = assignment.AssignmentID,
            AssetID = assignment.AssetID,
            EmployeeID = assignment.EmployeeID,
            AssignedDate = assignment.AssignedDate,
            ReturnedDate = assignment.ReturnedDate,
            Notes = assignment.Notes
        };
        modalTitle = "Edit Assignment";
        formModalVisible = true;
    }

    private void CloseFormModal() => formModalVisible = false;

    private async Task SaveAssignment(Assignment assignment)
    {
        try
        {
            if (assignment.AssignmentID == 0)
            {
                await AssignmentService.AddAsync(assignment);
                toastMessage = "‚úÖ Asset assigned successfully!";
            }
            else
            {
                await AssignmentService.UpdateAsync(assignment);
                toastMessage = "‚úÖ Assignment updated successfully!";
            }

            assignments = (await AssignmentService.GetAllAsync()).ToList();
        }
        catch (Exception ex)
        {
            toastMessage = $"‚ö†Ô∏è {ex.Message}";
        }

        formModalVisible = false;
        StateHasChanged();
        await Task.Delay(3000);
        toastMessage = null;
        StateHasChanged();
    }

    // ================= Delete =================
    private void OpenDeleteModal(Assignment assignment)
    {
        if (assignment == null) return;
        selectedAssignment = assignment;
        deleteModalVisible = true;
    }

    private void CloseDeleteModal() => deleteModalVisible = false;

    private async Task ConfirmDelete()
    {
        try
        {
            await AssignmentService.DeleteAsync(selectedAssignment.AssignmentID);
            assignments = (await AssignmentService.GetAllAsync()).ToList();
            toastMessage = "‚úÖ Assignment deleted successfully!";
        }
        catch (Exception ex)
        {
            toastMessage = $"‚ö†Ô∏è {ex.Message}";
        }

        deleteModalVisible = false;
        StateHasChanged();
        await Task.Delay(3000);
        toastMessage = null;
        StateHasChanged();
    }
}
