@page "/assets-dashboard"
@rendermode InteractiveServer
@using AssetApp.Components.Common
@inject AssetApp.Services.DashboardService DashboardService
@inject AssetApp.Services.Session Session
@inject NavigationManager NavigationManager

<h3>üìä Asset Dashboard</h3>

@if (isLoading)
{
    <p>‚è≥ Loading metrics...</p>
}
else if (!isAuthenticated)
{
    <p>Redirecting to login...</p>
}
else
{
    <div class="d-flex flex-wrap gap-3">
        <MetricCard Title="Total Assets" Count="@totalAssets" />
        <MetricCard Title="Assigned Assets" Count="@assignedAssets" />
        <MetricCard Title="Available Assets" Count="@availableAssets" />
        <MetricCard Title="Under Repair" Count="@underRepairAssets" />
        <MetricCard Title="Retired Assets" Count="@retiredAssets" />
        <MetricCard Title="Spare Assets" Count="@spareAssets" />

        @foreach (var kvp in assetsByType)
        {
            <MetricCard Title="@kvp.Key" Count="@kvp.Value" />
        }
    </div>
}

@code {
    private bool isLoading = true;
    private bool isAuthenticated = false;

    private int totalAssets;
    private int assignedAssets;
    private int availableAssets;
    private int underRepairAssets;
    private int retiredAssets;
    private int spareAssets;
    private Dictionary<string, int> assetsByType = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        // Check user session AFTER prerendering is done
        var username = await Session.GetUserAsync();
        if (string.IsNullOrEmpty(username))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        isAuthenticated = true;

        // Load dashboard data
        isLoading = true;

        totalAssets = await DashboardService.GetTotalAssetsAsync();
        assignedAssets = await DashboardService.GetAssignedAssetsAsync();
        availableAssets = await DashboardService.GetAvailableAssetsAsync();
        underRepairAssets = await DashboardService.GetUnderRepairAssetsAsync();
        retiredAssets = await DashboardService.GetRetiredAssetsAsync();
        spareAssets = await DashboardService.GetSpareAssetsAsync();
        assetsByType = await DashboardService.GetAssetsByTypeAsync();

        isLoading = false;

        StateHasChanged(); // Trigger re-render
    }
}