@page "/assets-filter"
@rendermode InteractiveServer
@inject AssetApp.Services.AssetService AssetService
@inject AssetApp.Services.Session Session
@inject NavigationManager NavigationManager
@using AssetApp.Models
@using AssetApp.Components.Common

<h3>üîç Asset Search & Filter</h3>

@if (isLoading && !isAuthenticated)
{
    <p>‚è≥ Checking authentication...</p>
}
else if (!isAuthenticated)
{
    <p>Redirecting to login...</p>
}
else if (isLoading)
{
    <p>‚è≥ Loading assets...</p>
}
else if (!assets.Any())
{
    <p>No assets found.</p>
}
else
{
    <div class="card mb-3 p-3 shadow-sm">
        <div class="row g-2">
            <div class="col-md-3">
                <label>Asset Name</label>
                <InputText class="form-control" @bind-Value="filters.AssetName" />
            </div>
            <div class="col-md-2">
                <label>Asset Type</label>
                <InputSelect class="form-select" @bind-Value="filters.AssetType">
                    <option value="">All</option>
                    @foreach (var type in Enum.GetValues<AssetType>())
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-2">
                <label>Status</label>
                <InputSelect class="form-select" @bind-Value="filters.Status">
                    <option value="">All</option>
                    @foreach (var status in Enum.GetValues<AssetStatus>())
                    {
                        <option value="@status">@status</option>
                    }
                </InputSelect>
            </div>
            <div class="col-md-3">
                <label>Serial Number</label>
                <InputText class="form-control" @bind-Value="filters.SerialNumber" />
            </div>
            <div class="col-md-2 d-flex align-items-end">
                <button class="btn btn-primary w-100" @onclick="ApplyFilters">Search</button>
            </div>
        </div>
    </div>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Type</th>
                <th>Serial Number</th>
                <th>Status</th>
                <th>Condition</th>
                <th>Purchase Date</th>
                <th>Warranty Expiry</th>
                <th>Spare</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var a in assets)
            {
                <tr>
                    <td>@a.AssetID</td>
                    <td><TruncateText Text="@a.AssetName" MaxLength="20" /></td>
                    <td>@a.AssetType</td>
                    <td><TruncateText Text="@a.SerialNumber" MaxLength="15" /></td>
                    <td>@a.Status</td>
                    <td>@a.Condition</td>
                    <td>@a.PurchaseDate.ToShortDateString()</td>
                    <td>@(a.WarrantyExpiryDate?.ToShortDateString() ?? "-")</td>
                    <td>@a.IsSpare</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Asset> assets = new();
    private bool isLoading = true;
    private bool isAuthenticated = false;

    private AssetFilter filters = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        // Check session AFTER initial render
        var username = await Session.GetUserAsync();
        if (string.IsNullOrEmpty(username))
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        isAuthenticated = true;

        // Load asset list
        isLoading = true;
        assets = (await AssetService.GetFilteredAssetsAsync(
            filters.AssetName, filters.AssetType, filters.Status, filters.SerialNumber)).ToList();
        isLoading = false;

        StateHasChanged();
    }

    private async Task ApplyFilters()
    {
        isLoading = true;
        assets = (await AssetService.GetFilteredAssetsAsync(
            filters.AssetName, filters.AssetType, filters.Status, filters.SerialNumber)).ToList();
        isLoading = false;
    }

    private class AssetFilter
    {
        public string? AssetName { get; set; }
        public string? AssetType { get; set; }
        public string? Status { get; set; }
        public string? SerialNumber { get; set; }
    }
}
